import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from datetime import datetime, timedelta
from PIL import Image
import plotly.graph_objs as go
import os
from prophet.plot import plot_plotly
from prophet.serialize import model_from_json
import json
import calendar

############################
# Configuration de la page #
############################
st.set_page_config(
        page_title="Pr√©vision 2022 de nombre de victimes d'accidents de la route avec Prophet",
        page_icon = "üìà",
        layout="wide" )

# D√©finition de quelques styles css
st.markdown(""" 
            <style>
            @import url('https://fonts.googleapis.com/css2?family=Roboto+Condensed&display=swap');
            body {font-family:'Roboto Condensed';}
            h1 {font-family:'Roboto Condensed';
                color:#603b1b;
                font-size:2.3em;
                font-style:italic;
                font-weight:700;
                margin:0px;}
            h2 {font-family:'Roboto Condensed';
                color:#9EBEB8;
                font-size:2em;
                font-style:italic;
                font-weight:700;
                margin:0px;}
            h4 {font-family:'Roboto Condensed';
                color:#ad7d67;
                font-size:26px;
                text-align:center;}
            p {font-family:'Roboto Condensed'; color:Gray; font-size:1.125rem;}
            .css-16idsys p {font-family:'Roboto Condensed'; color:Gray; font-size:1.125rem; margin: 0px;}
            .css-5rimss li {font-family:'Roboto Condensed'; color:Gray; font-size:1.125rem;}
            .css-184tjsw p {font-family:'Roboto Condensed'; color:Gray; font-size:1.125rem;}
            .css-1offfwp li {font-family:'Roboto Condensed'; color:Gray; font-size:1.125rem;}
            .st-ae {font-family:'Roboto Condensed'; color:Gray; font-size:1.125rem; background-color: #f8f9fb;}
            .st-cn {background-color: #f8f9fb; }
            .css-1wivap2 {font-family:'Roboto Condensed';}
            </style> """, 
            unsafe_allow_html=True)

########################################
# Lecture des fichiers et des mod√®les  #
########################################

# Chargement des donn√©es r√©elles
@st.cache_data
def load_data():
    data_path = os.path.join('data', 'nbr_acc_jour.csv')
    df = pd.read_csv(data_path)
    df.rename(columns={'date': 'ds'}, inplace=True)
    df['ds'] = pd.to_datetime(df['ds']) # Convertir la colonne 'ds' en datetime
    return df

data = load_data()

# Fonction pour charger les mod√®les √† partir des fichiers JSON
@st.cache_data
def load_model(file_name):
    file_path = os.path.join('models', file_name)
    with open(file_path, 'r') as f:
        model = model_from_json(json.load(f))
    return model

# Chargement des mod√®les
models = {
    'total_accidents': load_model('Prophet_model_tot_acc.json'),
    'gravite_accident_tu√©': load_model('Prophet_model_acc_tu√©s.json'),
    'gravite_accident_bless√©_l√©ger': load_model('Prophet_model_acc_legers.json'),
    'gravite_accident_bless√©_hospitalis√©': load_model('Prophet_model_acc_hosp.json'),
    'gravite_accident_indemne': load_model('Prophet_model_acc_indemnes.json')
}

# Fonction pour Charger les r√©gresseurs utilis√©s dans chaque mod√®le
@st.cache_data
def load_regressors(model_name):
    file_path = os.path.join('data', f"{model_name}_regressors.csv")
    regressors = pd.read_csv(file_path)
    regressors['ds'] = pd.to_datetime(regressors['ds']) # Convertir la colonne 'ds' en datetime
    return regressors


####################################################
# Titre et m√©thodologie de la mod√©lisation Prophet #
####################################################
st.markdown("""
            <h1>
            13. Pr√©vision 2022 du nombre de victimes d'accidents de la route en France
            </h1>
            """, 
            unsafe_allow_html=True)

st.markdown("""
Les chiffres d√©finitifs de la s√©curit√© routi√®re pour 2022 ne seront disponibles qu'en D√©cembre 2023.

C'est pourquoi, pour r√©pondre au **projet fil rouge de la formation MLOps (Machine Learning Engineer)**, nous avons d√©cid√© de continuer 
le projet fil rouge r√©alis√© dans le cadre de la formation Datascientist et de <span style="color:#9EBEB8; font-style:italic; font-weight:700;">
tenter de pr√©dire le nombre de victimes d'accidents de la route pour l'ensemble des 365 jours de l'ann√©e 2022 et ce 
pour chacune des 4 types de gravit√© : indemnes, bless√©s l√©gers, bless√©s hospitalis√©s et tu√©s. </span>

Pour ce faire, nous avons utilis√© la biblioth√®que open-source Prophet d√©velopp√©e par Facebook et publi√©e en 2017 (*Cliquez dans l'encadr√© 
ci-dessous pour en savoir plus sur Prophet*).
""", unsafe_allow_html=True)

# Ajout d'un texte dans un encadr√© sur lequel on peut cliquer
expander = st.expander("***Qu'est-ce que Prophet ?***")
expander.markdown("""
Prophet est une biblioth√®que open-source d√©velopp√©e par Facebook et publi√©e en 2017 qui est con√ßue pour la pr√©vision de s√©ries temporelles √† l'√©chelle. 
Elle est capable de g√©rer les tendances, la saisonnalit√© et les jours f√©ri√©s, et offre une grande flexibilit√© pour le r√©glage des mod√®les.

Plus en d√©tail, sur sa page Web de projets open source, Facebook d√©clare que : *"Prophet est une proc√©dure de pr√©vision de donn√©es de s√©ries 
chronologiques bas√©e sur un mod√®le additif o√π les tendances non lin√©aires sont adapt√©es √† la saisonnalit√© annuelle, hebdomadaire et quotidienne, 
ainsi qu'aux effets des vacances . Cela fonctionne mieux avec des s√©ries chronologiques qui ont de forts effets saisonniers et plusieurs saisons 
de donn√©es historiques. Prophet est robuste aux donn√©es manquantes et aux changements de tendance, et g√®re g√©n√©ralement bien les valeurs aberrantes."*

Prophet impl√©mente un mod√®le additif g√©n√©ral o√π chaque s√©rie chronologique y(t) est mod√©lis√©e comme la combinaison lin√©aire d'une tendance g(t),
d'une composante saisonni√®re s(t), d'effets de vacances h(t) et d'un terme d'erreur œµt , qui est normalement distribu√©.
$$
y(t)=g(t)+s(t)+h(t)+\epsilon t
$$

La composante de tendance mod√©lise les changements √† long terme non p√©riodiques dans la s√©rie chronologique. 
La composante saisonni√®re mod√©lise le changement p√©riodique, qu'il soit annuel, mensuel, hebdomadaire ou quotidien. 
L'effet vacances se produit de mani√®re irr√©guli√®re et potentiellement sur plus d'un jour. 
Enfin, le terme d'erreur repr√©sente tout changement de valeur qui ne peut √™tre expliqu√© par les trois composantes pr√©c√©dentes.

Ce mod√®le ne prend pas en compte la d√©pendance temporelle des donn√©es, contrairement au mod√®le ARIMA(p, d, q), 
o√π les valeurs futures d√©pendent des valeurs pass√©es. Ainsi, ce processus est plus proche de l'ajustement d'une courbe aux donn√©es, 
plut√¥t que de la recherche du processus sous-jacent. 
Bien qu'il y ait une certaine perte d'informations pr√©dictives √† l'aide de cette m√©thode, elle pr√©sente l'avantage d'√™tre tr√®s flexible, 
car elle peut s'adapter √† plusieurs p√©riodes saisonni√®res et √† des tendances changeantes. 
De plus, elle est robuste aux valeurs aberrantes et aux donn√©es manquantes, ce qui est un avantage √©vident.

L'inclusion de plusieurs p√©riodes saisonni√®res a √©t√© motiv√©e par l'observation que le comportement humain produit des s√©ries chronologiques 
saisonni√®res sur plusieurs p√©riodes. 
Par exemple, la semaine de travail de cinq jours peut produire un mod√®le qui se r√©p√®te chaque semaine, 
tandis que les vacances scolaires peuvent produire un mod√®le qui se r√©p√®te chaque ann√©e. 
Ainsi, pour prendre en compte plusieurs p√©riodes saisonni√®res, Prophet utilise la s√©rie de Fourier pour mod√©liser plusieurs effets p√©riodiques. 
Plus pr√©cis√©ment, la composante saisonni√®re s(t) est exprim√©e par l'√©quation ci-dessous, o√π P est la dur√©e de la p√©riode saisonni√®re en jours 
et N est le nombre de termes de la s√©rie de Fourier.
""", unsafe_allow_html=True)
expander.latex(r'''s(t)=\sum_{n=1}^N\left(a_n \cos \left(\frac{2 \pi n t}{P}\right)+b_n \sin \left(\frac{2 \pi n t}{P}\right)\right)''')
expander.markdown("""
Dans l'√©quation de Fourier, si nous avons une saisonnalit√© annuelle, P = 365,25 (car il y a 365,25 jours dans une ann√©e), pour une saisonnalit√© 
hebdomadaire P = 7, N est simplement le nombre de param√®tres que nous souhaitons utiliser pour estimer la composante saisonni√®re. 
Cela pr√©sente l'avantage suppl√©mentaire que la sensibilit√© de la composante saisonni√®re peut √™tre ajust√©e en fonction du nombre de param√®tres N 
estim√©s pour mod√©liser la saisonnalit√©. Par d√©faut, Prophet utilise 10 termes pour mod√©liser la saisonnalit√© annuelle et 3 termes pour mod√©liser 
la saisonnalit√© hebdomadaire.

Enfin, ce mod√®le permet de consid√©rer l'effet des vacances. Les jours f√©ri√©s sont des √©v√©nements irr√©guliers qui peuvent avoir un impact clair 
sur une s√©rie temporelle. Par exemple, des √©v√©nements comme le Black Friday aux √âtats-Unis peuvent augmenter consid√©rablement la fr√©quentation 
en magasin ou les ventes sur un site de commerce √©lectronique. De m√™me, la Saint-Valentin est probablement un indicateur fort d'une augmentation 
des ventes de chocolats et de fleurs. Par cons√©quent, pour mod√©liser l'impact des jours f√©ri√©s dans une s√©rie chronologique, Prophet nous permet 
de d√©finir une liste de jours f√©ri√©s pour un pays sp√©cifique. Les effets des vacances sont ensuite int√©gr√©s dans le mod√®le, en supposant qu'ils sont
tous ind√©pendants. Si un point de donn√©es tombe sur une date de vacances, un param√®tre Ki est calcul√© pour repr√©senter le changement 
dans la s√©rie chronologique √† ce moment pr√©cis. Plus le changement est important, plus l'effet vacances est important.

La flexibilit√© de Prophet peut en faire un choix attrayant pour des pr√©visions rapides et pr√©cises.
Cependant, il ne doit pas √™tre consid√©r√© comme une solution unique. La documentation elle-m√™me pr√©cise que Prophet fonctionne mieux avec 
des s√©ries chronologiques qui ont un fort effet saisonnier avec plusieurs saisons de donn√©es historiques. Par cons√©quent, il peut y avoir 
des situations o√π Prophet n'est pas le choix id√©al.
""", unsafe_allow_html=True)

st.write("")

st.markdown("""
<p style="color: #ad7d67; font-weight:700; font-style:italic; margin: 0px;">
Attention ! L'objectif principal du projet fil rouge MLOps n'est pas de construire des mod√®les de pr√©vision : il s'agit de mettre en place une cha√Æne de traitement
compl√®te de Machine Learning, de la r√©cup√©ration des donn√©es √† la mise en production du mod√®le, c'est-√†-dire d'impl√©menter tout le cycle de vie 
du mod√®le en production.</p>""", unsafe_allow_html=True)
st.write("")

##################################################################################
# S√©lection de la Variable √† pr√©dire et de la p√©riode de temps par l'utilisateur #
##################################################################################
st.write("")

st.markdown("""
Rentrons dans le vif du sujet !

Pour obtenir des pr√©visions quotidiennes pour l'ann√©e 2022, vous devez d'abord s√©lectionner ce que vous souhaitez pr√©dire parmi :
- le nombre total d'accident√©s de la route
- le nombre de victimes indemnes
- le nombre de victimes l√©g√®rement bless√©es
- le nombre de victimes bless√©es hospitalis√©es
- et le nombre de victimes tu√©es

Vous devez aussi choisir la p√©riode de temps, de 1 √† 365 jours, dont vous voulez obtenir la pr√©diction.
""", unsafe_allow_html=True)
st.write("")
st.write("")

# D√©finissez les largeurs des colonnes principales et des colonnes vides
main_col_width = 6
empty_col_width = 0.5
# Divisez l'espace en 3 colonnes avec des largeurs personnalis√©es
cols = st.columns([main_col_width, empty_col_width, main_col_width])
# Attribuez les colonnes principales aux indices 0 et 3
col1, col2, col3 = cols[0], cols[1], cols[2]
with col1:
    variable = st.selectbox('***Choisissez la variable dont vous souhaitez conna√Ætre les pr√©dictions :***', list(models.keys()))
with col3:
    days = st.slider('***Choisissez le nombre de jours que vous souhaitez pr√©dire :***', 1, 365, 181)
st.write("")
st.write("")
############################
# Cr√©ation des pr√©dictions #
############################

# Chargement des r√©gresseurs
regressors = load_regressors(variable).drop(columns=['Unnamed: 0'], axis=1)

# Cr√©ation du DataFrame future
future = models[variable].make_future_dataframe(periods=days, freq='D', include_history=True)

# Fusion de future avec les r√©gresseurs sur la colonne 'ds'
future = pd.merge(future, regressors, on='ds', how='left')

# Faire la pr√©diction
forecast = models[variable].predict(future)

######################################################################
# les totaux  calcul√©s sur la p√©riode s√©lectionn√©e et les √©volutions #
######################################################################
# Dates pour 2022
start_date_2022  = datetime(2022, 1, 1) # D√©but de la p√©riode de pr√©diction
end_date_2022 = start_date_2022 + timedelta(days=(days)) # Fin de la p√©riode de pr√©diction
end_date_2022_titre = end_date_2022 - timedelta(days=1) # Fin de la p√©riode de pr√©diction pour le titre du graphique

# Dates pour 2021
start_date_2021 = datetime(2021, 1, 1) # D√©but de la p√©riode 
end_date_2021 = start_date_2021 + timedelta(days=(days)) # Fin de la p√©riode 
end_date_2021_titre = end_date_2021 - timedelta(days=1) 

# Dates pour 2020
start_date_2020 = datetime(2020, 1, 1) # D√©but de la p√©riode 
end_date_2020 = start_date_2020 + timedelta(days=(days)) # Fin de la p√©riode 
end_date_2020_titre = end_date_2020 - timedelta(days=1)

# Dates pour 2019
start_date_2019 = datetime(2019, 1, 1) # D√©but de la p√©riode 
end_date_2019 = start_date_2019 + timedelta(days=(days)) # Fin de la p√©riode 
end_date_2019_titre = end_date_2019 - timedelta(days=1)

# Filtrer les donn√©es pour chaque ann√©e
data_2021 = data[(data['ds'] >= start_date_2021) & (data['ds'] <= end_date_2021)]
data_2020 = data[(data['ds'] >= start_date_2020) & (data['ds'] <= end_date_2020)]
data_2019 = data[(data['ds'] >= start_date_2019) & (data['ds'] <= end_date_2019)]
forecast_2022 = forecast[(forecast['ds'] >= start_date_2022) & (forecast['ds'] <= end_date_2022)]

# Calculer les √©volutions
evol_2020 = (data_2020[variable].sum() - data_2019[variable].sum()) / data_2019[variable].sum()
evol_2021 = (data_2021[variable].sum() - data_2020[variable].sum()) / data_2020[variable].sum()
evol_2022 = (forecast_2022['yhat'].sum() - data_2021[variable].sum()) / data_2021[variable].sum()
evol_2022_vs_2019 = (forecast_2022['yhat'].sum() - data_2019[variable].sum()) / data_2019[variable].sum()


#################
# Graphique n¬∞1 #
#################

# Titre des m√©triques
st.markdown(f"#### √âvolution du nombre de '{variable}' pour la totalit√© de la p√©riode s√©lectionn√©e de {days} jours")

left, middle, right, far_right = st.columns(4)

with left:
    st.metric(f"Du {start_date_2019.strftime('%d-%m-%Y')} au {end_date_2019_titre.strftime('%d-%m-%Y')}", 
              f"{int(data_2019[variable].sum()):,}",
              f"Non disponible")
    fig1, ax1 = plt.subplots()
    sns.lineplot(data=data_2019, x="ds", y=variable, color="#ad7d67", ax=ax1)
    ax1.set_xlabel("Date")
    sns.despine()
    st.pyplot(fig1)
with middle:
    st.metric(f"Du {start_date_2020.strftime('%d-%m-%Y')} au {end_date_2020_titre.strftime('%d-%m-%Y')}",
              f"{int(data_2020[variable].sum()):,d}",
              f"{evol_2020:+.1%}")
    fig2, ax2 = plt.subplots()
    sns.lineplot(data=data_2020, x="ds", y=variable, color="#ad7d67", ax=ax2)
    ax2.set_xlabel("Date")
    sns.despine()
    st.pyplot(fig2)
with right:
    st.metric(f"Du {start_date_2021.strftime('%d-%m-%Y')} au {end_date_2021_titre.strftime('%d-%m-%Y')}", 
              f"{int(data_2021[variable].sum()):,d}",
              f"{evol_2021:+.1%}")
    fig3, ax3 = plt.subplots()
    sns.lineplot(data=data_2021, x="ds", y=variable, color="#ad7d67", ax=ax3)
    ax3.set_xlabel("Date")
    sns.despine()
    st.pyplot(fig3)
with far_right:
    st.metric(f"Du {start_date_2022.strftime('%d-%m-%Y')} au {end_date_2022_titre.strftime('%d-%m-%Y')}", 
              f"{int(forecast_2022['yhat'].sum()):,d}",
              f"{evol_2022:+.1%} ({evol_2022_vs_2019:+.1%} vs. 2019)")
    fig4, ax4 = plt.subplots()
    sns.lineplot(data=forecast_2022, x="ds", y='yhat', color="#9ebeb8", ax=ax4)
    ax4.set_xlabel("Date")
    sns.despine()
    st.pyplot(fig4)

st.write("")
#################
# Graphique n¬∞2 #
#################

fig5 = plot_plotly(models[variable], 
                  forecast, 
                  trend=True, 
                  changepoints=True)

fig5.update_layout(
    title=f"Repr√©sentation globale de la s√©rie temporelle '{variable}'<br>du 01 Jan 2019 au {end_date_2022_titre.strftime('%d %b %Y')}",
    title_font=dict(size=26, color="#ad7d67"),
    title_xanchor='center',
    title_x=0.5,
    width=1050, height=700, 
    font=dict(size=12),
    xaxis=dict(
        title="Date",
        type='date',
        range=["2019-01-01", end_date_2022.strftime('%Y-%m-%d')],
        tickformat="%d-%m-%Y", 
        tickangle=-45, 
        dtick="M1", 
        tickfont=dict(size=10), 
        ticklabelmode="period",
        ticklabelposition="outside top"),
    yaxis_title=variable,
    hovermode="x unified",
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="center",
        x=0.5,
        title=None,
        font=dict(size=16, color="#5e5c5e")
    ))
fig5.update_xaxes(showgrid=True)
st.plotly_chart(fig5)

st.markdown("""
Ce graphique montre les donn√©es historiques (points noirs) et les les valeurs pr√©dites (ligne bleue) pour la p√©riode s√©lectionn√©e.
Les valeurs pr√©dites sont donc calcul√©es pour l'ensemble de donn√©es complet lors du calcul pr√©visionnel.
La bande ombr√©e entourant la ligne repr√©sente un intervalle de confiance √† 95%.

La ligne rouge montre la tendance, qui est la composante de tendance du mod√®le. La tendance est calcul√©e √† partir de la moyenne mobile sur
les changements de tendance d√©tect√©s dans les donn√©es historiques. Elle nous donne une vision synth√©tique du signal et aide √† visualiser 
les √©volutions globales.
Les lignes verticales rouges sont les points de changement de tendance d√©tect√©s par le mod√®le. Ces points de changement de tendance sont
utilis√©s pour calculer la tendance, mais ne sont pas utilis√©s pour calculer les pr√©visions.

**Ces pr√©visions semblent saisonni√®res**, mais il est difficile de distinguer les diff√©rentes composantes p√©riodiques sur ce premier trac√©. 
V√©rifions une autre visualisation pour **comprendre comment ces mod√®les saisonniers affectent la sortie du mod√®le**:
""", unsafe_allow_html=True)
st.write("")
st.write("")

#################
# Graphique n¬∞3 #
#################
def plot_seasonality(forecast, component, fillcolor, linecolor):
    # Cr√©er un objet de figure Plotly
    fig6 = go.Figure()

    # Extraire le composant saisonnier
    component_df = forecast[[component]].dropna()
    values = component_df[component]

    if component == 'weekly':
        # Cr√©er une variable 'day of week'
        component_df['day_of_week'] = forecast['ds'].dt.dayofweek
        # Grouper par 'day of week' et sommer les valeurs
        values = component_df.groupby('day_of_week')[component].mean()
        x_data = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
    elif component == 'yearly':
        # Cr√©er une variable 'day of year'
        component_df['day_of_year'] = forecast['ds'].dt.dayofyear
        # Grouper par 'day of year' et sommer les valeurs
        values = component_df.groupby('day_of_year')[component].mean()
        x_data = [i for i in range(1, 366)]  # Jours de l'ann√©e

    # Ajouter le composant saisonnier
    fig6.add_trace(go.Scatter(
        x=x_data,
        y=values,
        mode='lines',
        fill='tozeroy',  # Remplir jusqu'√† l'axe des y
        fillcolor=fillcolor,  # Couleur de remplissage en hexad√©cimal
        line=dict(color=linecolor),  # Couleur de ligne en hexad√©cimal
        name=component,
    ))

    # Ajouter un titre
    fig6.update_layout(
        title=f"<b>{component} Seasonality</b>",
        title_font=dict(size=26, color="#ad7d67"),
        title_xanchor='center',
        title_x=0.5,
        yaxis=dict(
            title=variable,
            tickformat=''),
        width=900, height=350,
        font=dict(size=12),
        showlegend=False,  # Supprimer la l√©gende
    )

    # Ajuster les labels sur l'axe des x pour le composant 'yearly'
    if component == 'yearly':
        # Premier jour de chaque mois
        tickvals = [1, 32, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335]
        fig6.update_xaxes(
            tickmode='array',
            tickvals=tickvals,
            tickangle=-45,
            ticktext=[calendar.month_name[i] for i in range(1, 13)]  # Noms complets des mois
        )

    # Afficher le graphique
    st.plotly_chart(fig6, theme=None)



# Centrage des graphiques dans la page
col1, col2, col3 = st.columns([0.5,8,0.5])
with col1:
    st.write("")
with col2:
    # Pour chaque composant saisonnier
    for component, fillcolor, linecolor in [('weekly', '#f779ae', '#f6408d'), ('yearly', '#abdfe1', '#84d4d5')]: 
        plot_seasonality(forecast, component, fillcolor, linecolor)
with col3:
    st.write("")

st.markdown("""
Le **graphique Weekly (Hebdomadaire)** illustre la saisonnalit√© hebdomadaire de la variable choisie. 
Il montre comment la variable √©volue en moyenne chaque jour de la semaine, du lundi au dimanche. 
Par exemple, si nous observons un pic le vendredi, cela signifie que cette journ√©e a tendance √† avoir des valeurs plus √©lev√©es 
par rapport aux autres jours de la semaine.

Le **graphique Yearly (Annuel)** d√©peint la saisonnalit√© annuelle. Il montre les tendances et les variations de la variable au fil des mois de l'ann√©e, 
aidant √† identifier des p√©riodes sp√©cifiques de l'ann√©e o√π la variable augmente ou diminue.

<p style="color: #ad7d67; font-weight:700; font-style:italic; margin: 0px;">
Comment le mod√®le prend des d√©cisions ?</p>

Nous pouvons examiner un seul composant et voir comment sa contribution aux pr√©visions globales √©volue au fil du temps. 
Les diff√©rentes composantes qui influencent les pr√©visions sont la tendance, les saisonnalit√©s et les r√©gresseurs externes. 
Nous avons d√©j√† observ√© l'impact des saisonnalit√©s hebdomadaires et annuelles, regardons maintenant les r√©gresseurs externes comme 
les vacances et les autres variables inclues dans le mod√®le.
""", unsafe_allow_html=True)


#################
# Graphique n¬∞4 #
#################
# Fonction pour construire un graphique pour chaque r√©gresseur
def plot_regresseur(forecast, regresseur, fillcolor, linecolor):
    # Cr√©er un objet de figure Plotly
    fig7 = go.Figure()

    # Extraire le regresseur
    regresseur_df = forecast[[regresseur, 'ds']].dropna()
    values = regresseur_df[regresseur]

    # Ajouter le regresseur
    fig7.add_trace(go.Scatter(
        x=regresseur_df['ds'],
        y=values,
        mode='lines',
        fill='tozeroy',  # Remplir jusqu'√† l'axe des y
        fillcolor=fillcolor,  # Couleur de remplissage en hexad√©cimal
        line=dict(color=linecolor),  # Couleur de ligne en hexad√©cimal
        name=regresseur,
    ))
    
    # Modifier le nom du r√©gresseur pour le titre
    title_regresseur = regresseur.replace("_additive", "").replace("_multiplicative", "")
    
    # Ajouter un titre
    fig7.update_layout(
        title=f"<b>Impact du r√©gresseur '{title_regresseur}' sur la pr√©vision</b>",
        title_font=dict(size=26, color="#ad7d67"),
        title_xanchor='center',
        title_x=0.5,
        xaxis=dict(
            title="Date",
            type='date',
            range=["2019-01-01", end_date_2022.strftime('%Y-%m-%d')],
            tickformat="%d-%m-%Y", 
            tickangle=-45, 
            dtick="M1", 
            tickfont=dict(size=10), 
            ticklabelmode="period",
            ticklabelposition="outside top"),
        yaxis=dict(
            title=variable,
            tickformat=''
            ),
        width=900, height=350, 
        font=dict(size=12),
        showlegend=False,  # Supprimer la l√©gende
        hovermode="x unified",
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="center",
            x=0.5,
            title=None,
            font=dict(size=16, color="#5e5c5e")))

    # Afficher le graphique
    st.plotly_chart(fig7, theme=None)


# Obtenez une liste de toutes les colonnes qui contiennent "extra_regressors"
regresseurs = [col for col in forecast.columns if "extra_regressors" in col and "_lower" not in col and "_upper" not in col]

# Ajoutez "holidays" √† la liste des r√©gresseurs
regresseurs.append('holidays')

# D√©finissez une correspondance de couleurs pour chaque r√©gresseur
color_mapping = {
    'holidays': ('#f779ae', '#f6408d'),
    'extra_regressors_multiplicative': ('#abdfe1', '#84d4d5'),
    'extra_regressors_additive': ('#abdfe1', '#84d4d5') 
}

# Centrage des graphiques dans la page
col1, col2, col3 = st.columns([0.5,8,0.5])
with col1:
    st.write("")
with col2:
    # Pour chaque regresseur
    for regresseur in regresseurs:
        fillcolor, linecolor = color_mapping.get(regresseur, ('#f779ae', '#f6408d'))  # couleur par d√©faut si le r√©gresseur n'est pas dans le mappage
        plot_regresseur(forecast, regresseur, fillcolor, linecolor)
with col3:
    st.write("")

st.markdown("""
**Le graphique Holidays (Jours f√©ri√©s)** met en √©vidence l'impact des jours f√©ri√©s sur la variable et des p√©riodes "chocs" comme les confinements. 
Les jours f√©ri√©s peuvent souvent entra√Æner des variations significatives, en fonction de la nature de la variable. 
Certains jours f√©ri√©s, par exemple, peuvent entra√Æner une augmentation des accidents de la route.

**Le graphique Extra Regressors (R√©gresseurs suppl√©mentaires)** pr√©sente l'influence des variables externes sur la variable principale. 
Ces r√©gresseurs suppl√©mentaires montrent comment ils impactent la pr√©vision de la variable principale.

Les mod√®les utilis√©s sont **additifs**. Dans ces mod√®les, les effets de la saisonnalit√© sont simplement ajout√©s √† la tendance. 
Ils sont appropri√©s lorsque les variations saisonni√®res restent constantes au fil du temps et ne d√©pendent pas de la tendance.

<p style="color: #ad7d67; font-weight:700; font-style:italic; margin: 0px;">
Voici comment les pr√©visions sont calcul√©es pour chaque variable, c'est-√†-dire comment les composants sont combin√©s pour obtenir les pr√©visions finales.</p>
""", unsafe_allow_html=True)


# S√©lectionnez les dates dans le DataFrame de pr√©visions
forecast_period = forecast[(forecast['ds'] >= start_date_2022) & 
                             (forecast['ds'] <= end_date_2022)]

# Fonction pour calculer les contributions
def calculate_contributions(forecast_period):
    # Liste des composants communs
    common_components = ['trend', 'holidays', 'weekly', 'yearly', 'extra_regressors_additive']
    
    # Calculez les contributions pour les composants communs
    contributions = {component: round(forecast_period[component].sum()) for component in common_components}
    
    # Calculez le total des pr√©visions
    total_forecast = round(forecast_period['yhat'].sum())
    
    # Ajoutez le total au dictionnaire des contributions
    contributions['Total pr√©vu'] = total_forecast
    
    return contributions

# Utilisez la fonction pour calculer les contributions pour le mod√®le 'total_accidents'
contributions = calculate_contributions(forecast_period)

# Cr√©er un graphique en cascade
fig8 = go.Figure(go.Waterfall(
    x=list(contributions.keys()),
    y=list(contributions.values()),
    text=[f"<b>{x:.0f}</b>" for x in contributions.values()],
    measure=["relative"] * (len(contributions) - 1) + ["total"],
    connector={"line":{"color":"rgb(255, 255, 255)"}},
    increasing={"marker":{"color":"#042244"}},
    decreasing={"marker":{"color":"#ed3c64"}},
    totals={"marker":{"color":"#66cccc"}},
))

# Mettre √† jour la mise en page du graphique
fig8.update_layout(
    title=f"<b>Contribution des composants √† la pr√©vision <br> du {start_date_2022.strftime('%d %b %Y')} au {end_date_2022_titre.strftime('%d %b %Y')}</b>",
    title_font=dict(size=26, color="#ad7d67"),
    title_xanchor='center',
    title_x=0.5,
    yaxis_title="Contribution",
    xaxis_title="Composants",
    width=800,
    height=550,
)

# Centrage du graphique dans la page
col1, col2, col3 = st.columns([0.5,8,0.5])
with col1:
    st.write("")
with col2:
    # Pour chaque regresseur
    st.plotly_chart(fig8, theme=None)
with col3:
    st.write("")
# Afficher le graphique


st.write(f"Le mod√®le pr√©voit {contributions['Total pr√©vu']:,d} accidents de la route pour la p√©riode s√©lectionn√©e.")
st.write("Il s'agit de la somme des contributions de cinq composants diff√©rents :")
st.write(f"- la tendance : + {contributions['trend']:,d},")
st.write(f"- les jours f√©ri√©s : + {contributions['holidays']:,d},")
st.write(f"- la saisonnalit√© hebdomadaire : + {contributions['weekly']:,d},")
st.write(f"- la saisonnalit√© annuelle : + {contributions['yearly']:,d},")
st.write(f"- et les r√©gresseurs suppl√©mentaires : + {contributions['extra_regressors_additive']:,d}.")


# Centrage de l'image du logo dans la sidebar
col1, col2, col3 = st.columns([1,1,1])
with col1:
    st.sidebar.write("")
with col2:
    image_path = os.path.join('assets', 'logo-datascientest.png')
    logo = Image.open(image_path)
    st.sidebar.image(logo, use_column_width="always")
with col3:
    st.sidebar.write("")