import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
from PIL import Image
import plotly.express as px
import plotly.graph_objs as go
import os
from prophet import Prophet
from prophet.plot import plot_plotly
from prophet.serialize import model_from_json
import plotly.offline as py
import json

############################
# Configuration de la page #
############################
st.set_page_config(
        page_title="Pr√©vision 2022 de nombre de victimes d'accidents de la route avec Prophet",
        page_icon = "üìà",
        layout="wide" )

# D√©finition de quelques styles css
st.markdown(""" 
            <style>
            @import url('https://fonts.googleapis.com/css2?family=Roboto+Condensed&display=swap');
            body {font-family:'Roboto Condensed';}
            h1 {font-family:'Roboto Condensed';
                color:#603b1b;
                font-size:2.3em;
                font-style:italic;
                font-weight:700;
                margin:0px;}
            h2 {font-family:'Roboto Condensed';
                color:#9EBEB8;
                font-size:2em;
                font-style:italic;
                font-weight:700;
                margin:0px;}
            p {font-family:'Roboto Condensed'; color:Gray; font-size:1.125rem;}
            .css-16idsys p {font-family:'Roboto Condensed'; color:Gray; font-size:1.125rem; margin: 0px;}
            .css-5rimss li {font-family:'Roboto Condensed'; color:Gray; font-size:1.125rem;}
            .css-184tjsw p {font-family:'Roboto Condensed'; color:Gray; font-size:1.125rem;}
    word-break: break-word;
    /* font-size: 14px; */
}
            </style> """, 
            unsafe_allow_html=True)

########################################
# Lecture des fichiers et des mod√®les  #
########################################

# Chargement des donn√©es r√©elles
@st.cache_data
def load_data():
    data_path = os.path.join('data', 'nbr_acc_jour.csv')
    df = pd.read_csv(data_path)
    df.rename(columns={'date': 'ds'}, inplace=True)
    df['ds'] = pd.to_datetime(df['ds']) # Convertir la colonne 'ds' en datetime
    return df

data = load_data()

# Fonction pour charger les mod√®les √† partir des fichiers JSON
@st.cache_data
def load_model(file_name):
    file_path = os.path.join('models', file_name)
    with open(file_path, 'r') as f:
        model = model_from_json(json.load(f))
    return model

# Chargement des mod√®les
models = {
    'total_accidents': load_model('Prophet_model_tot_acc.json'),
    'gravite_accident_tu√©': load_model('Prophet_model_acc_tu√©s.json'),
    'gravite_accident_bless√©_l√©ger': load_model('Prophet_model_acc_legers.json'),
    'gravite_accident_bless√©_hospitalis√©': load_model('Prophet_model_acc_hosp.json'),
    'gravite_accident_indemne': load_model('Prophet_model_acc_indemnes.json')
}

# Fonction pour Charger les r√©gresseurs utilis√©s dans chaque mod√®le
@st.cache_data
def load_regressors(model_name):
    file_path = os.path.join('data', f"{model_name}_regressors.csv")
    regressors = pd.read_csv(file_path)
    regressors['ds'] = pd.to_datetime(regressors['ds']) # Convertir la colonne 'ds' en datetime
    return regressors

####################################################
# Titre et m√©thodologie de la mod√©lisation Prophet #
####################################################
st.markdown("""
            <h1>
            13. Pr√©vision 2022 du nombre de victimes d'accidents de la route en France
            </h1>
            """, 
            unsafe_allow_html=True)

st.markdown("""
Les chiffres d√©finitifs de la s√©curit√© routi√®re pour 2022 ne seront disponibles qu'en D√©cembre 2023.

C'est pourquoi, pour r√©pondre au **projet fil rouge de la formation MLOps (Machine Learning Engineer)**, nous avons d√©cid√© de continuer 
le projet fil rouge r√©alis√© dans le cadre de la formation Datascientist et de <span style="color:#9EBEB8; font-style:italic; font-weight:700;">
tenter de pr√©dire le nombre de victimes d'accidents de la route pour l'ensemble des 365 jours de l'ann√©e 2022 et ce 
pour chacune des 4 types de gravit√© : indemnes, bless√©s l√©gers, bless√©s hospitalis√©s et tu√©s. </span>

Pour ce faire, nous avons utilis√© la biblioth√®que open-source Prophet d√©velopp√©e par Facebook et publi√©e en 2017 (*Cliquez dans l'encadr√© 
ci-dessous pour en savoir plus sur Prophet*).
""", unsafe_allow_html=True)

# Ajout d'un texte dans un encadr√© sur lequel on peut cliquer
expander = st.expander("***Qu'est-ce que Prophet ?***")
expander.markdown("""
Prophet est une biblioth√®que open-source d√©velopp√©e par Facebook et publi√©e en 2017 qui est con√ßue pour la pr√©vision de s√©ries temporelles √† l'√©chelle. 
Elle est capable de g√©rer les tendances, la saisonnalit√© et les jours f√©ri√©s, et offre une grande flexibilit√© pour le r√©glage des mod√®les.

Plus en d√©tail, sur sa page Web de projets open source, Facebook d√©clare que : *"Prophet est une proc√©dure de pr√©vision de donn√©es de s√©ries 
chronologiques bas√©e sur un mod√®le additif o√π les tendances non lin√©aires sont adapt√©es √† la saisonnalit√© annuelle, hebdomadaire et quotidienne, 
ainsi qu'aux effets des vacances . Cela fonctionne mieux avec des s√©ries chronologiques qui ont de forts effets saisonniers et plusieurs saisons 
de donn√©es historiques. Prophet est robuste aux donn√©es manquantes et aux changements de tendance, et g√®re g√©n√©ralement bien les valeurs aberrantes."*

Prophet impl√©mente un mod√®le additif g√©n√©ral o√π chaque s√©rie chronologique y(t) est mod√©lis√©e comme la combinaison lin√©aire d'une tendance g(t),
d'une composante saisonni√®re s(t), d'effets de vacances h(t) et d'un terme d'erreur œµt , qui est normalement distribu√©.
$$
y(t)=g(t)+s(t)+h(t)+\epsilon t
$$

La composante de tendance mod√©lise les changements √† long terme non p√©riodiques dans la s√©rie chronologique. 
La composante saisonni√®re mod√©lise le changement p√©riodique, qu'il soit annuel, mensuel, hebdomadaire ou quotidien. 
L'effet vacances se produit de mani√®re irr√©guli√®re et potentiellement sur plus d'un jour. 
Enfin, le terme d'erreur repr√©sente tout changement de valeur qui ne peut √™tre expliqu√© par les trois composantes pr√©c√©dentes.

Ce mod√®le ne prend pas en compte la d√©pendance temporelle des donn√©es, contrairement au mod√®le ARIMA(p, d, q), 
o√π les valeurs futures d√©pendent des valeurs pass√©es. Ainsi, ce processus est plus proche de l'ajustement d'une courbe aux donn√©es, 
plut√¥t que de la recherche du processus sous-jacent. 
Bien qu'il y ait une certaine perte d'informations pr√©dictives √† l'aide de cette m√©thode, elle pr√©sente l'avantage d'√™tre tr√®s flexible, 
car elle peut s'adapter √† plusieurs p√©riodes saisonni√®res et √† des tendances changeantes. 
De plus, elle est robuste aux valeurs aberrantes et aux donn√©es manquantes, ce qui est un avantage √©vident.

L'inclusion de plusieurs p√©riodes saisonni√®res a √©t√© motiv√©e par l'observation que le comportement humain produit des s√©ries chronologiques 
saisonni√®res sur plusieurs p√©riodes. 
Par exemple, la semaine de travail de cinq jours peut produire un mod√®le qui se r√©p√®te chaque semaine, 
tandis que les vacances scolaires peuvent produire un mod√®le qui se r√©p√®te chaque ann√©e. 
Ainsi, pour prendre en compte plusieurs p√©riodes saisonni√®res, Prophet utilise la s√©rie de Fourier pour mod√©liser plusieurs effets p√©riodiques. 
Plus pr√©cis√©ment, la composante saisonni√®re s(t) est exprim√©e par l'√©quation ci-dessous, o√π P est la dur√©e de la p√©riode saisonni√®re en jours 
et N est le nombre de termes de la s√©rie de Fourier.
""", unsafe_allow_html=True)
expander.latex(r'''s(t)=\sum_{n=1}^N\left(a_n \cos \left(\frac{2 \pi n t}{P}\right)+b_n \sin \left(\frac{2 \pi n t}{P}\right)\right)''')
expander.markdown("""
Dans l'√©quation de Fourier, si nous avons une saisonnalit√© annuelle, P = 365,25 (car il y a 365,25 jours dans une ann√©e), pour une saisonnalit√© 
hebdomadaire P = 7, N est simplement le nombre de param√®tres que nous souhaitons utiliser pour estimer la composante saisonni√®re. 
Cela pr√©sente l'avantage suppl√©mentaire que la sensibilit√© de la composante saisonni√®re peut √™tre ajust√©e en fonction du nombre de param√®tres N 
estim√©s pour mod√©liser la saisonnalit√©. Par d√©faut, Prophet utilise 10 termes pour mod√©liser la saisonnalit√© annuelle et 3 termes pour mod√©liser 
la saisonnalit√© hebdomadaire.

Enfin, ce mod√®le permet de consid√©rer l'effet des vacances. Les jours f√©ri√©s sont des √©v√©nements irr√©guliers qui peuvent avoir un impact clair 
sur une s√©rie temporelle. Par exemple, des √©v√©nements comme le Black Friday aux √âtats-Unis peuvent augmenter consid√©rablement la fr√©quentation 
en magasin ou les ventes sur un site de commerce √©lectronique. De m√™me, la Saint-Valentin est probablement un indicateur fort d'une augmentation 
des ventes de chocolats et de fleurs. Par cons√©quent, pour mod√©liser l'impact des jours f√©ri√©s dans une s√©rie chronologique, Prophet nous permet 
de d√©finir une liste de jours f√©ri√©s pour un pays sp√©cifique. Les effets des vacances sont ensuite int√©gr√©s dans le mod√®le, en supposant qu'ils sont
tous ind√©pendants. Si un point de donn√©es tombe sur une date de vacances, un param√®tre Ki est calcul√© pour repr√©senter le changement 
dans la s√©rie chronologique √† ce moment pr√©cis. Plus le changement est important, plus l'effet vacances est important.

La flexibilit√© de Prophet peut en faire un choix attrayant pour des pr√©visions rapides et pr√©cises.
Cependant, il ne doit pas √™tre consid√©r√© comme une solution unique. La documentation elle-m√™me pr√©cise que Prophet fonctionne mieux avec 
des s√©ries chronologiques qui ont un fort effet saisonnier avec plusieurs saisons de donn√©es historiques. Par cons√©quent, il peut y avoir 
des situations o√π Prophet n'est pas le choix id√©al.
""", unsafe_allow_html=True)
st.write("")
st.markdown("""
<p style="color: #603b1b; font-weight:700; font-style:italic; margin: 0px;">
L'objectif principal du projet fil rouge MLOps n'est pas de construire des mod√®les de pr√©vision : il s'agit de mettre en place une cha√Æne de traitement
compl√®te de Machine Learning, de la r√©cup√©ration des donn√©es √† la mise en production du mod√®le, c'est-√†-dire d'impl√©menter tout le cycle de vie 
du mod√®le en production.</p>""", unsafe_allow_html=True)
st.write("")

##################################################################################
# S√©lection de la Variable √† pr√©dire et de la p√©riode de temps par l'utilisateur #
##################################################################################
st.write("")
st.markdown("""
            <h2>
            Pr√©vision 2022 du nombre de victimes d'accidents de la route en France
            </h2>
            """, 
            unsafe_allow_html=True)

st.markdown("""
Rentrons dans le vif du sujet !

Pour obtenir des pr√©visions quotidienne pour l'ann√©e 2022, vous devez d'abord s√©lectionner ce que vous souhaitez pr√©dire parmi :
- le nombre total d'accident√©s de la route
- le nombre de victimes indemnes
- le nombre de victimes l√©g√®rement bless√©es
- le nombre de victimes bless√©es hospitalis√©es
- et le nombre de victimes tu√©es

Vous devez aussi choisir la p√©riode de temps, de 1 √† 365 jours, dont vous voulez obtenir la pr√©diction.
""", unsafe_allow_html=True)

# D√©finissez les largeurs des colonnes principales et des colonnes vides
main_col_width = 6
empty_col_width = 0.5
# Divisez l'espace en 3 colonnes avec des largeurs personnalis√©es
cols = st.columns([main_col_width, empty_col_width, main_col_width])
# Attribuez les colonnes principales aux indices 0 et 3
col1, col2, col3 = cols[0], cols[1], cols[2]
with col1:
    variable = st.selectbox('***Choisissez la variable dont vous souhaitez conna√Ætre les pr√©dictions***', list(models.keys()))
with col3:
    days = st.slider('***Choisissez le nombre de jours que vous souhaitez pr√©dire***', 1, 365)

############################
# Cr√©ation des pr√©dictions #
############################

# Chargement des r√©gresseurs
regressors = load_regressors(variable).drop(columns=['Unnamed: 0'], axis=1)

# Cr√©ation du DataFrame future
future = models[variable].make_future_dataframe(periods=days, freq='D', include_history=True)

# Fusion de future avec les r√©gresseurs sur la colonne 'ds'
future = pd.merge(future, regressors, on='ds', how='left')

# Faire la pr√©diction
forecast = models[variable].predict(future)

#################
# Graphique n¬∞1 #
#################
start_date = datetime(2022, 1, 1) # D√©but de la p√©riode de pr√©diction
end_date = start_date + timedelta(days=(days-1)) # Fin de la p√©riode de pr√©diction

fig = plot_plotly(models[variable], 
                  forecast, 
                  trend=True, 
                  changepoints=True)

fig.update_layout(
    title="Pr√©visions de la variable '{}' du 01 Jan 2022 au {}".format(variable, end_date.strftime('%d %b %Y')),
    title_font=dict(size=24, color="#ad7d67"),
    title_xanchor='center',
    title_x=0.5,
    width=1050, height=700, 
    font=dict(size=12),
    xaxis=dict(
        title="Date",
        type='date',
        range=['2019-01-01', '2022-12-31'],
        tickformat="%d-%m-%Y", 
        tickangle=45, 
        dtick="M1", 
        tickfont=dict(size=10), 
        ticklabelmode="period",
        ticklabelposition="outside top"),
    yaxis_title=variable,
    colorway=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'],
    hovermode="x unified",
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="center",
        x=0.5,
        title=None,
        font=dict(size=16, color="#5e5c5e")
    ))
fig.update_xaxes(showgrid=True)
st.plotly_chart(fig)

# Ajout d'un texte dans un encadr√© sur lequel on peut cliquer
expander = st.expander("Plus d'informations sur ce graphique")
expander.write("""
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
""")














# Centrage de l'image du logo dans la sidebar
col1, col2, col3 = st.columns([1,1,1])
with col1:
    st.sidebar.write("")
with col2:
    image_path = os.path.join('assets', 'logo-datascientest.png')
    logo = Image.open(image_path)
    st.sidebar.image(logo, use_column_width="always")
with col3:
    st.sidebar.write("")