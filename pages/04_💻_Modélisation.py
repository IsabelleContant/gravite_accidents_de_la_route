import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from xplotter.insights import *
from PIL import Image
import pickle
from sklearn.model_selection import train_test_split
import os

############################
# Configuration de la page #
############################
st.set_page_config(
        page_title='Pr√©diction de la Gravit√© des Accidents de la Route',
        page_icon = "üíª",
        layout="wide" )

# D√©finition de quelques styles css
st.markdown(""" 
            <style>
            body {font-family:'Roboto Condensed';}
            h1 {font-family:'Roboto Condensed';
                color:#603b1b;
                font-size:2.3em;
                font-style:italic;
                font-weight:700;
                margin:0px;}
            h2 {font-family:'Roboto Condensed';
                color:#8dc5bd;
                font-size:2em;
                font-style:italic;
                font-weight:700;
                margin:0px;}
            p {font-family:'Roboto Condensed'; color:Gray; font-size:1.125rem;}
            </style> """, 
            unsafe_allow_html=True)

st.markdown("""
            <h1>
            6. Pr√©diction de la Gravit√© des Accidents de la Route
            </h1>
            """, 
            unsafe_allow_html=True)

st.markdown("""
            Notre √©tude a pour objectif de mod√©liser la gravit√© des accidents de la route en France 
            en se concentrant sur quatre classes d'usagers : indemnes, bless√©s l√©gers, hospitalis√©s et tu√©s.
            
            Pour ce faire, nous avons d√©compos√© notre jeu de donn√©es en 2 sous-ensembles : 70% pour entra√Æner 
            notre mod√®le de pr√©diction et 30% pour le tester ; en respectant la r√©partition des 4 classes 
            par "stratification" qui divise le jeu de donn√©es de mani√®re √† maintenir la m√™me proportion 
            de chaque classe dans les ensembles d'apprentissage et de test. 
            Cette approche est particuli√®rement utile lorsque certaines classes sont moins repr√©sent√©es que d'autres, 
            car elle garantit que les sous-ensembles contiennent suffisamment d'exemples de chaque classe 
            pour une √©valuation pr√©cise du mod√®le.
            """)

###################################
# Lecture et pr√©paration des data #
###################################
@st.cache_data #mise en cache de la fonction pour ex√©cution unique
def load_data():
    data_path = os.path.join('data', 'df_accidents.csv')
    df = pd.read_csv(data_path)
    return df

df_accidents = load_data()

target = df_accidents['gravite_accident']
data = df_accidents.drop(labels = ['gravite_accident', 'heure', 'latitude', 'longitude', 
                         'departement', 'num_commune', 'nom_dep', 'date'], axis=1)
data['annee'] = data['annee'].astype('object')

X_train, X_test, y_train, y_test = train_test_split(data, target, stratify=target, test_size=0.3, random_state=2023)
y_train = pd.DataFrame(y_train, columns=['gravite_accident'])
y_test = pd.DataFrame(y_test, columns=['gravite_accident'])

# R√©partition de la variable cible dans les 2 jeux de donn√©es
fig = plt.figure(figsize=(20, 6))
ax1 = fig.add_subplot(1,2,1)
plot_countplot(df=y_train,
               col='gravite_accident',
               order=True,
               palette=['#d4b3ac'],
               ax=ax1, orient='v',
               size_labels=12)
plt.grid(visible=False)
plt.title("R√©partition des usagers selon la gravit√© de leur accident\n dans l'ensemble d'entra√Ænement",
          loc="center", fontsize=16, fontstyle='italic', fontweight='bold', color="#5e5c5e")
ax2 = fig.add_subplot(1,2,2)
plot_countplot(df=y_test,
               col='gravite_accident',
               order=True,
               palette=['#d4b3ac'],
               ax=ax2, orient='v',
               size_labels=12)
plt.grid(visible=False)
plt.title("R√©partition des usagers selon la gravit√© de leur accident\n dans l'ensemble de test",
          loc="center", fontsize=16, fontstyle='italic', fontweight='bold', color="#5e5c5e")
plt.grid(False)
fig.tight_layout()
st.pyplot(fig)

st.write("")
st.markdown("""
            **Apr√®s voir test√© plusieurs mod√®les de pr√©diction pour notre classification d√©s√©quilibr√©e, 
            nous avons constater que le mod√®le qui obtient les performances les plus √©lev√©es est le mod√®le CatBoost.**
            """)
st.markdown("""
            **CatBoost** est un algorithme de boosting d'arbres de d√©cision qui se distingue par son traitement 
            efficace des variables cat√©gorielles, sa r√©gularisation pour √©viter le surapprentissage et 
            ses optimisations pour une haute performance. 
            Il est utilis√© pour r√©soudre des probl√®mes de classification et de r√©gression avec des donn√©es mixtes 
            (num√©riques et cat√©gorielles). 
            
            **CatBoost est particuli√®rement avantageux lorsqu'il s'agit de traiter des ensembles de donn√©es 
            avec un grand nombre de variables cat√©gorielles.**
            
            Et c'est effectivement le cas pour notre probl√©matique puisque **nous ne disposons que de variables 
            cat√©gorielles pour pr√©dire la gravit√© des accidents de la route en France.**
            
            *Pour plus de pr√©cisions sur la m√©thodologie de s√©lection du "meilleur" mod√®le et le mod√®le CatBoost, 
            vous pouvez lire le [rapport d'√©tude](https://github.com/IsabelleContant/gravite_accidents_de_la_route/tree/main/rapports)*
            """)
image_path = os.path.join('assets', 'choix mod√®le multiclasses avec catboost.png')
choix_model = Image.open(image_path)
st.image(choix_model, use_column_width="always")
st.markdown("""
            Les r√©sultats obtenus avec le mod√®le CatBoost optimis√© avec Optuna s'interpr√®tent ainsi :
            
            **1. Balanced Accuracy (58%)** : La Balanced Accuracy est une mesure de performance qui prend en compte 
            le d√©s√©quilibre des classes. Elle est calcul√©e comme la moyenne des taux de rappel pour chaque classe. 
            Une Balanced Accuracy de 58% indique que le mod√®le est capable de classer correctement les observations 
            pour chaque classe environ 58% du temps, ce qui est sup√©rieur √† une classification al√©atoire.
            
            **2. Weighted Precision (67%)** : La pr√©cision pond√©r√©e est la moyenne des pr√©cisions pour chaque classe, 
            pond√©r√©e par le nombre d'observations de chaque classe. Une Weighted Precision de 67% signifie que, 
            lorsque le mod√®le pr√©dit une classe, il est correct environ 67% du temps.
            
            **3. Weighted Recall (63%)** : Le rappel pond√©r√© est la moyenne des rappels pour chaque classe, 
            pond√©r√©e par le nombre d'observations de chaque classe. Un Weighted Recall de 63% signifie que le mod√®le 
            identifie correctement environ 63% des observations de chaque classe.
            
            **4. Weighted F1-score (64%)** : Le F1-score pond√©r√© est la moyenne harmonique des pr√©cisions et rappels 
            pond√©r√©s pour chaque classe. Un F1-score √©quilibr√© de 64% indique que le mod√®le a un bon √©quilibre 
            entre la pr√©cision et le rappel pour chaque classe, compte tenu du d√©s√©quilibre des classes.
            
            **5. Average AUC (85%)** : L'aire sous la courbe ROC (AUC) est une mesure de performance qui √©value 
            la capacit√© d'un mod√®le √† discriminer entre les classes positives et n√©gatives. 
            Un Average AUC de 85% indique que le mod√®le a une bonne capacit√© √† distinguer entre les diff√©rentes classes.
            
            **6. Score G√©o Global (72%)**  :  Le Score G√©o Global est la moyenne g√©om√©trique (ou G-Mean) des rappels 
            pour chaque classe. Cette mesure de performance tient compte √† la fois de la capacit√© du mod√®le √† classifier 
            correctement les diff√©rentes classes et de l'√©quilibre entre les classes. Un G-Mean √©lev√© indique que 
            le mod√®le est performant pour toutes les classes, y compris celles qui sont moins repr√©sent√©es. Un G-Mean 
            de 72% montre que le mod√®le est capable de classer correctement les observations pour chaque classe, 
            y compris les classes minoritaires, environ 72% du temps. Cela indique que le mod√®le a une performance 
            globale relativement √©lev√©e en tenant compte √† la fois de la capacit√© √† classifier les diff√©rentes classes 
            et de l'√©quilibre entre les classes.
            """)

########################
# Chargement du mod√®le #
########################
model_path = os.path.join('models', 'model_Catboost.pkl')
model = pickle.load(open(model_path, "rb"))

st.markdown("""
            <h1>
            7. Pr√©disez la Gravit√© de l'Accident de la Route
            </h1>
            """, 
            unsafe_allow_html=True)
st.markdown("""
            D√©crivez l'accident de la route en s√©lectionnant √† l'aide des filtres ci-desous ses caract√©ristiques.<br>
            Puis cliquez sur le bouton "Pr√©diction" pour en pr√©dire la gravit√©.
            """,
            unsafe_allow_html=True)

########################################################################
# Ce code utilise st.session_state pour g√©rer l'√©tat de session.       #
# Les pr√©dictions seront r√©initialis√©es chaque fois que l'utilisateur  #
# modifie la s√©lection de modalit√©s.                                   #
########################################################################

# Initialisez l'√©tat de session si n√©cessaire
if "prediction_text" not in st.session_state:
    st.session_state["prediction_text"] = None

if "prob_df" not in st.session_state:
    st.session_state["prob_df"] = None

if "reset_clicked" not in st.session_state:
    st.session_state["reset_clicked"] = False


# R√©cup√©rez et triez les variables qualitatives par ordre alphab√©tique
qualitative_vars = sorted(X_train.columns.tolist())

# Cr√©ez un dictionnaire pour stocker les valeurs s√©lectionn√©es
selected_values = {}

# D√©finissez les largeurs des colonnes principales et des colonnes vides
main_col_width = 6
empty_col_width = 0.5

# Divisez l'espace en 5 colonnes avec des largeurs personnalis√©es
cols = st.columns([main_col_width, empty_col_width, main_col_width, empty_col_width, main_col_width])

# Attribuez les colonnes principales aux indices 0, 2 et 4
col1, col2, col3 = cols[0], cols[2], cols[4]

# Utilisez une boucle pour cr√©er les selectbox pour chaque variable qualitative
for idx, var in enumerate(qualitative_vars):
    # R√©cup√©rez les modalit√©s uniques pour la variable en cours
    unique_values = X_train[var].unique().tolist()

    # Choisissez la colonne en fonction de l'index de la variable
    if idx % 3 == 0:
        current_col = col1
    elif idx % 3 == 1:
        current_col = col2
    else:
        current_col = col3

    # Cr√©ez une selectbox pour la variable en cours dans la colonne correspondante
    selected_value = current_col.selectbox(f"S√©lectionnez une modalit√© pour **{var}** :", unique_values)

    # Stockez la valeur s√©lectionn√©e dans le dictionnaire
    selected_values[var] = selected_value

# Affichez le dictionnaire avec les valeurs s√©lectionn√©es
st.write("Valeurs s√©lectionn√©es pour chaque variable :", selected_values)

# Ajoutez un style CSS personnalis√© pour personnaliser le bouton
button_css = """
<style>
.custom-button {
    background-color: #135e58;
    color: white;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}
.custom-button:hover {
    background-color: #0f4a40;
}
</style>
"""
# Cr√©ez un bouton personnalis√© en utilisant st.markdown()
st.markdown(button_css, unsafe_allow_html=True)
clicked = st.markdown(
    '<button class="custom-button" onclick="document.querySelector(\'form\').submit()">Cliquez pour conna√Ætre la pr√©diction de la gravit√© de l\'accident</button>',
    unsafe_allow_html=True,
)

# V√©rifiez si le bouton est cliqu√©
if clicked:
    st.session_state.reset_clicked = False

    # Transformez les s√©lections en un DataFrame
    input_data = pd.DataFrame([selected_values])

    # Effectuez la pr√©diction avec le mod√®le
    prediction = model.predict(input_data)

    # R√©cup√©rez la pr√©diction sous forme de texte sans crochets
    st.session_state.prediction_text = prediction.item()

    # Obtenez les probabilit√©s pour chaque classe
    probabilities = model.predict_proba(input_data)

    # Cr√©ez un DataFrame avec les probabilit√©s et les noms de classe
    st.session_state.prob_df = pd.DataFrame(probabilities, columns=model.classes_)

    # Trier les colonnes dans l'ordre souhait√©
    st.session_state.prob_df = st.session_state.prob_df[['indemne', 'bless√©_l√©ger', 'bless√©_hospitalis√©', 'tu√©']]

    # Convertissez les probabilit√©s en pourcentage et arrondissez √† 1 chiffre d√©cimal
    st.session_state.prob_df = (st.session_state.prob_df * 100).round(1)

# Ajoutez un bouton pour effacer la pr√©diction et r√©initialiser l'application
reset_button = st.button("Je souhaite refaire une pr√©diction et changer les caract√©ristiques de l'accident")

if reset_button:
    st.session_state.prediction_text = None
    st.session_state.prob_df = None
    st.session_state.reset_clicked = True

# Affichez le r√©sultat de la pr√©diction et les probabilit√©s si disponibles et si le bouton de r√©initialisation n'a pas √©t√© cliqu√©
if not st.session_state.reset_clicked and st.session_state.prediction_text and st.session_state.prob_df is not None:
    st.write(f"La pr√©diction de la gravit√© de l'accident est : {st.session_state.prediction_text}")
    st.write("Les probabilit√©s pour chaque classe sont (en %) :")
    st.write(st.session_state.prob_df)

#Stockez la pr√©diction et les donn√©es d'entr√©e dans st.session_state
st.session_state.prediction = prediction
st.session_state.probabilities = probabilities
st.session_state.input_data = input_data
st.markdown("""
            ***Pour comprendre cette pr√©diction, rendez-vous √† la page suivante en cliquant sur
            'Explication de la pr√©diction' dans la barre lat√©rale gauche.***
            """)


# Centrage de l'image du logo dans la sidebar
col1, col2, col3 = st.columns([1,1,1])
with col1:
    st.sidebar.write("")
with col2:
    image_path = os.path.join('assets', 'logo-datascientest.png')
    logo = Image.open(image_path)
    st.sidebar.image(logo, use_column_width="always")
with col3:
    st.sidebar.write("")